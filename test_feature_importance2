#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec 10 09:59:09 2019

@author: nicovonau
"""

# Random Forest Classification

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import glob
import time

t= time.time()
#Importing the dataset
path = 'tempData/features_*.txt' # use your path
all_files = glob.glob(path)

li = []
headers= ['pressure sensor 1', ]
for filename in all_files:
    li.append(pd.read_csv(filename, header= None))

dataset = pd.concat(li, axis= 0, ignore_index=True, join='inner')

#folder="tempData/"
#dataset = pd.read_csv(folder+"features_18.txt", header=headers)
X = dataset.iloc[:, 0:20].values
y = dataset.iloc[:, 23].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Fitting Random Forest Classification to the Training set
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 100, criterion = 'gini', random_state = 0)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

elapsed= time.time()-t

importances = classifier.feature_importances_
std = np.std([tree.feature_importances_ for tree in classifier.estimators_],
             axis=0)
indices = np.argsort(importances)[::-1]
labels2= ['pressure S1', 'pressure S2','pressure S3', 'pressure S4','pressure S5', 'pressure S6','energy S1','energy S2','energy S3','energy S4','energy S5','energy S6','sumdiff', 'meanP', 'skewP', 'kurtP', 'meanE', 'skewE', 'kurtE', 'mean peaks']

# Print the feature ranking
print("Feature ranking:")

for f in range(X_train.shape[1]):
    print("%d. feature %d (%f)" % (f + 1, indices[f], importances[indices[f]]))

# Plot the feature importances of the forest
plt.figure(figsize=(15,13))
plt.title("Feature importances", fontsize=45)
plt.bar(range(X_train.shape[1]), importances, align="center")
plt.xticks(range(X_train.shape[1]), labels2, rotation=90, fontsize=30)
plt.xlim([-1, X_train.shape[1]])
plt.ylabel('Importance', fontsize=30)
plt.show()
    
#plt.figure()
#plt.title("Feature Importances")
#plt.bar(importances, align="center", hight=30)
#plt.xticks(range(X_train.shape[1]), labels2, rotation=90)
#plt.xlim([-1, X_train.shape[1]])
#plt.show()